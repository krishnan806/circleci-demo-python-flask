{
	"info": {
		"_postman_id": "b5491199-5ddf-4f84-9067-29145af8d424",
		"name": "Postman-Sample",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Base",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d4ae4147-585c-4e0e-adcd-8aa4deccd56c",
						"exec": [
							"// Set all global variables",
							"pm.globals.set(\"possible_status\", ['ACTIVE', 'PENDING']);",
							"pm.globals.set(\"backend\", ['TACT']);",
							"",
							"pm.environment.set(\"rand\", _.random(1, 100));",
							"",
							"// https://stackoverflow.com/questions/45673961/how-to-write-global-functions-in-postman",
							"postman.setGlobalVariable(\"utils\", () => {",
							"    ",
							"    var clog = (obj) => {",
							"        console.log(obj);",
							"    }",
							"    ",
							"    var test = () => {",
							"        clog('test function');",
							"    }",
							"    ",
							"    var metaDataValues = [\"Height\", \"Width\"]",
							"    ",
							"    var isMetaDataValue = (val) => {",
							"        metaDataValues.forEach(function(element) {",
							"            //console.log('isMetaDataValue : ', element);",
							"            ",
							"            if(val == element){",
							"                return true;",
							"            }",
							"        });",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var includeOneOf = (val, arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            if(val.includes(element)){",
							"                return true;",
							"            }",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var startsWithOneOf = (val, arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            if(val.startsWith(element)){",
							"                return true;",
							"            }",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var endsWithOneOf = (val, arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            if(val.endsWith(element)){",
							"                return true;",
							"            }",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var possibleFileFormats = [\"KB\", \"MB\"]",
							"    ",
							"    var isPossibleFileSizeFormat = (val) => {",
							"        ",
							"        val = val.split(\" \")[1];",
							"        ",
							"        metaDataValues.forEach(function(element) {",
							"            //console.log('isMetaDataValue : ', element);",
							"            ",
							"            if(val == element){",
							"                return true;",
							"            }",
							"        });",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var isHexColor = (val) => {",
							"        var flag = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(val)",
							"        ",
							"        return flag;",
							"    }",
							"    ",
							"    /* // not sure whether this is working",
							"    String.prototype.isNum = function(){",
							"\t    var val = parseInt(this);",
							"        return !isNaN(this);",
							"    }",
							"    */",
							"    ",
							"    var isNum = (val) => {",
							"        return !isNaN(val);",
							"    }",
							"    ",
							"    var isAbove = (val, par) => {",
							"        ",
							"        var valInt = parseInt(val);",
							"        ",
							"        if(val > par){",
							"            return true;",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var isAboveZero = (val) => {",
							"        return isAbove(val, 0);",
							"    }",
							"    ",
							"    var hasItems = (arr) => {",
							"        ",
							"        if(arr.length > 0){",
							"            return true",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    var isEmail = (val) => {",
							"        ",
							"        if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(val)){",
							"            return true;",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    //https://stackoverflow.com/questions/33865525/indian-pincode-validation-regex-only-six-digits-shouldnt-start-with-0",
							"    var isPincode = (val) => {",
							"        ",
							"        if (/^[1-9][0-9]{5}$/.test(val)){",
							"            return true;",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    // https://stackoverflow.com/questions/28716539/how-to-validate-pin-code-mobile-number-and-email-in-javascript",
							"    var isPincodeOld = (val) => {",
							"        ",
							"        if (/^\\d{6}$/.test(val)){",
							"            return true;",
							"        }",
							"        ",
							"        return false;",
							"    }",
							"    ",
							"    // check all elements are strings [return false even if one element is NOT a string]",
							"    var allElementsString = (arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            //clog(element);",
							"            ",
							"            if(typeof element != 'string'){",
							"                return false;",
							"            }",
							"        }",
							"        ",
							"        return true;",
							"    }",
							"    ",
							"    // check all elements are numbers [return false even if one element is NOT a number]",
							"    var allElementsNumber = (arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            //clog(element + ' : '+(typeof element));",
							"            ",
							"            if(typeof element != 'number'){",
							"                return false;",
							"            }",
							"        }",
							"        ",
							"        return true;",
							"    }",
							"    ",
							"    // check all elements are colors - hexacodes [return false even if one element is NOT a color]",
							"    var allElementsColor = (arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            //clog(element + ' : '+(typeof element));",
							"            ",
							"            if(!isHexColor(element)){",
							"                return false;",
							"            }",
							"        }",
							"        ",
							"        return true;",
							"    }",
							"    ",
							"    // check all elements are pincodes [return false even if one element is NOT a pincode]",
							"    var allElementsPincode = (arr) => {",
							"        ",
							"        for (var i=0; i<arr.length;i++){",
							"            var element = arr[i];",
							"            ",
							"            //clog(element + ' : '+(typeof element));",
							"            ",
							"            if(!isPincode(element)){",
							"                return false;",
							"            }",
							"        }",
							"        ",
							"        return true;",
							"    }",
							"    ",
							"    /*",
							"     * Pending methods:",
							"     *  ",
							"        check Canadian Postal Codes",
							"        check USA Postal Codes",
							"        check Gender",
							"        check Engineering Departments",
							"        check countries",
							"        check country codes",
							"        check ",
							"     * ",
							"     */",
							"    ",
							"    ",
							"    return {",
							"        kw: { // Kwikee Utils",
							"            test,",
							"            clog,",
							"            isMetaDataValue,",
							"            isPossibleFileSizeFormat,",
							"            includeOneOf,",
							"            startsWithOneOf,",
							"            isHexColor,",
							"            isNum,",
							"            isAbove,",
							"            isAboveZero,",
							"            hasItems,",
							"            isEmail,",
							"            endsWithOneOf,",
							"            allElementsString,",
							"            allElementsNumber,",
							"            allElementsColor,",
							"            isPincode,",
							"            allElementsPincode",
							"        }",
							"    };",
							"});",
							"",
							"let utils = eval(globals.utils)();",
							"//utils.kw.test(); ",
							"//utils.kw.clog('hello'); ",
							"",
							"uk = utils.kw;",
							"clog = utils.kw.clog;",
							"test = pm.test;",
							"expect = pm.expect;",
							"",
							"/*",
							" Code location:",
							"    /Users/str-kwml0011/projects/flask-postman",
							" ",
							"    https://github.com/rajacsp/flask-postman",
							"*/",
							" ",
							"/*",
							"Automation goals:",
							"",
							"200 ",
							"",
							"Header present",
							"",
							"Response Status OK",
							"",
							"Check all first-level keys",
							"",
							"Check all first-level value-type",
							"    boolean, string, number",
							"    ",
							"Python Core:",
							"    input: rest api",
							"    output: pre-script, test content",
							"    ",
							"Flask:",
							"    input: rest api",
							"    output: pre-script, test content",
							"",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fa351dcf-105a-40f9-8b00-39240b3f91f3",
						"exec": [
							"// Source: https://learning.getpostman.com/docs/postman/scripts/test_examples/",
							"",
							"test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"test(\"Content-Type header is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"test(\"Status code name has string\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"clog(pm.response.code);",
							"",
							"if(pm.response.code == 200){",
							"",
							"    var jsonData = pm.response.json();",
							"    ",
							"    clog(jsonData);",
							"    ",
							"    var schema1 = {",
							"        \"overall_count\": \"number\",",
							"        \"notifications\": \"array\"",
							"    };",
							"    ",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "First Kid",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a9781cd3-5172-426f-a1c7-e6bdb2e62500",
						"exec": [
							"// Set all global variables",
							"pm.globals.set(\"possible_status\", ['ACTIVE', 'PENDING']);",
							"pm.globals.set(\"backend\", ['TACT']);",
							"",
							"pm.environment.set(\"rand\", _.random(1, 100));",
							"",
							"let utils = eval(globals.utils)();",
							"//utils.kw.test(); ",
							"//utils.kw.clog('hello'); ",
							"",
							"uk = utils.kw;",
							"clog = utils.kw.clog;",
							"test = pm.test;",
							"expect = pm.expect;",
							"",
							"/*",
							" Code location:",
							"    /Users/str-kwml0011/projects/flask-postman",
							" ",
							"    https://github.com/rajacsp/flask-postman",
							"*/",
							" ",
							"/*",
							"Automation goals:",
							"",
							"200 ",
							"",
							"Header present",
							"",
							"Response Status OK",
							"",
							"Check all first-level keys",
							"",
							"Check all first-level value-type",
							"    boolean, string, number",
							"    ",
							"Python Core:",
							"    input: rest api",
							"    output: pre-script, test content",
							"    ",
							"Flask:",
							"    input: rest api",
							"    output: pre-script, test content",
							"",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d5f32d6d-0f52-468f-abf4-aef81d90489d",
						"exec": [
							"",
							"test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.response.code);",
							"",
							"var jsonData = pm.response.json();",
							"",
							"test(\"Check City Key\", function () {",
							"    expect(jsonData).to.have.property('page');",
							"});",
							"",
							"test(\"Check Name Key\", function () {",
							"    expect(jsonData).to.have.property('per_page');",
							"});",
							"",
							"test(\"Check city String\", function () {",
							"    expect(jsonData.per_page).to.be.a('number');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "be2d19b7-4454-4a62-b935-cd80b5a2904c",
						"exec": [
							"// Set all global variables",
							"pm.globals.set(\"possible_status\", ['ACTIVE', 'PENDING']);",
							"pm.globals.set(\"backend\", ['TACT']);",
							"",
							"pm.environment.set(\"rand\", _.random(1, 100));",
							"",
							"let utils = eval(globals.utils)();",
							"",
							"uk = utils.kw;",
							"clog = utils.kw.clog;",
							"test = pm.test;",
							"expect = pm.expect;"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "117ec864-4d82-4c42-a440-1dd1d73c9ed4",
						"exec": [
							"",
							"test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"console.log(pm.response.code);",
							"",
							"var jsonData = pm.response.json();",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}